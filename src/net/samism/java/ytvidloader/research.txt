-find where a given URL ends by looking for where others end every time

-if its all for the same video, there shouldn't be inconsistencies with the number of URLs available.
So, theory: sometimes the info downloaded is enciphered. some files are unusually more concise than others.
Maybe download 5 of the same file and check for the longest one? What if all 5-10 are enciphered...
Chances are at least 1 in the 5 aren't enciphered.

-part of the garbage:

&title=
&muted=
&cbrver=
&avg_rating=
&video_id=
&iurlmaxres=
&account_playback_token=
&plid=
&tmi=
&cosver=
&iurlhq=
&iurlsd=
&status=
&watermark=
&timestamp=
&pltype=
&allow_embed=
&adaptive_fmts=
&init=

&sver=
&mt=
&author=
&has_cc=
&eventid=
&iurl=
&view_count=
&hl=
&idpj=
&storyboard_spec=
&no_get_video_log=
&c=
&video_verticals=
&fexp=
&sw=
&enablecsi=
&vq=
&ldpj=
&length_seconds=
&ptk=
&fmt_list=

&dash=
&csi_page_type=
&use_cipher_signature=
&track_embed=
&token=
&allow_ratings=
&cbr=

&index=
&loudness=
&iurlmq=
&thumbnail_url=
&keywords=
&dashmpd

&cbr






-safe stuff:
sparams=clen,dur,gir,id,ip,ipbits,itag,lmt,requiressl,source,upn,expire

-only params that are ever before the url are 0-5 of the following, randomly (regex):

[,]?fallbackhost=tc.v
[,]?itag=\d{1,3}                    - if found prefixing the URL, just cut it out
[,]?quality=
[,&]?type=video/[-a-zA-Z0-9]{3,}    - matches mp4, webm, x-flv, 3gpp
[,&]?url=https://

-the delimeter isn't always the delimiter. More than half of the file doesn't even contain the delim sometimes.
Check which of the params before the URL occur most often in the entire file, that is the delim?
